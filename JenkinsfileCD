def commitIDs = [:]

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    parameters {
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for discovery-server')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
    }
    environment {
        WORKSPACE = "${env.WORKSPACE}"
        SERVICES_WITHOUT_TESTS = "spring-petclinic-admin-server spring-petclinic-genai-service"
        ALL_SERVICES = "spring-petclinic-admin-server spring-petclinic-api-gateway spring-petclinic-config-server spring-petclinic-customers-service spring-petclinic-discovery-server spring-petclinic-genai-service spring-petclinic-vets-service spring-petclinic-visits-service"
    }
    stages {
        stage('Check out Branch not Main and take out latest commitID') {
            steps {
                script {
                    echo "customers-service branch: ${params.CUSTOMERS_SERVICE_BRANCH}"
                    echo "visits-service branch: ${params.VISITS_SERVICE_BRANCH}"
                    echo "vets-service branch: ${params.VETS_SERVICE_BRANCH}"
                    echo "genai-service branch: ${params.GENAI_SERVICE_BRANCH}"
                    
                    if (params.ADMIN_SERVER_BRANCH != 'main') {
                        commitIDs['spring-petclinic-admin-server'] = checkoutBranchAndGetCommitID('spring-petclinic-admin-server', params.ADMIN_SERVER_BRANCH)
                    }
                    if (params.API_GATEWAY_BRANCH != 'main') {
                        commitIDs['spring-petclinic-api-gateway'] = checkoutBranchAndGetCommitID('spring-petclinic-api-gateway', params.API_GATEWAY_BRANCH)
                    }
                    if (params.CONFIG_SERVER_BRANCH != 'main') {
                        commitIDs['spring-petclinic-config-server'] = checkoutBranchAndGetCommitID('spring-petclinic-config-server', params.CONFIG_SERVER_BRANCH)
                    }
                    if (params.CUSTOMERS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-customers-service'] = checkoutBranchAndGetCommitID('spring-petclinic-customers-service', params.CUSTOMERS_SERVICE_BRANCH)
                    }
                    if (params.DISCOVERY_SERVER_BRANCH != 'main') {
                        commitIDs['spring-petclinic-discovery-server'] = checkoutBranchAndGetCommitID('spring-petclinic-discovery-server', params.DISCOVERY_SERVER_BRANCH)
                    }
                    if (params.GENAI_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-genai-service'] = checkoutBranchAndGetCommitID('spring-petclinic-genai-service', params.GENAI_SERVICE_BRANCH)
                    }
                    if (params.VETS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-vets-service'] = checkoutBranchAndGetCommitID('spring-petclinic-vets-service', params.VETS_SERVICE_BRANCH)
                    }
                    if (params.VISITS_SERVICE_BRANCH != 'main') {
                        commitIDs['spring-petclinic-visits-service'] = checkoutBranchAndGetCommitID('spring-petclinic-visits-service', params.VISITS_SERVICE_BRANCH)
                    }
                    
                    echo "Commit IDs: ${commitIDs}"
                }
            }
        }

        stage('update helm for changed service') {
            steps {
                script {
                    commitIDs.each { service, commitID ->
                        echo "Updating Helm for ${service} with commit ID ${commitID}"
                        updateHelm("yourdockerhubusername", service, commitID) // Thay bằng tên tài khoản Docker Hub của bạn
                    }
                }
            }
        }

        stage('Clean') {
            steps {
                echo 'Cleaning workspace and build artifacts...'
                deleteDir()
            }
        }
    }
}

// Function to checkout a branch and get its commit ID
def checkoutBranchAndGetCommitID(String servicePath, String branchName) {
    echo "Checking out ${servicePath} branch ${branchName}"
    dir(servicePath) {
        checkout scm
        sh '''
            git fetch origin
            git checkout ${branchName}
        '''
        def commitID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        echo "Checked out ${servicePath} branch ${branchName} with commit ID: ${commitID}"
        return commitID
    }
}

def updateHelm(String docker_user, String service, String commitID) {
    def imageName = docker_user + "/" + service
    def namespace = "test-${commitID}"
    echo "namespace: ${namespace}"
    echo "imageName: ${imageName}"
    echo "commitID: ${commitID}"

    def filename = "${service}.yaml"
    def gitOpsRepo = "https://github.com/nhatphuoc/devOps02_cd.git" // Thay bằng URL kho GitHub của bạn
    def filePath = "spring-petclinic-app/${filename}"
    def gitOpsDir = "./gitops-repo"

    echo "Using GitOps repo: ${gitOpsRepo}"

    // Kiểm tra gitOpsRepo không rỗng
    if (!gitOpsRepo) {
        error "gitOpsRepo is empty or undefined. Please specify a valid Git repository URL."
    }

    // Use Jenkins credentials
    echo "Cleaning up potential existing GitOps directory: ${gitOpsDir}"
    sh "rm -rf ${gitOpsDir}"

    echo "change image tag in ${filePath} to ${docker_user}/${service}:${commitID}"

    // Use Jenkins credentials
    withCredentials([usernamePassword(credentialsId: 'devOps_project02_cd', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) { // Thay bằng ID credential GitHub của bạn
        // Kiểm tra biến GIT_USER và GIT_PASS
        if (!env.GIT_USER || !env.GIT_PASS) {
            error "Git credentials are not properly set. Check the credential ID in Jenkins."
        }

        // Clear any cached Git credentials
        sh '''
            git config --global --unset credential.helper || true
            git credential-cache exit || true
            rm -f ~/.git-credentials || true
        '''
        // Clone GitOps repo with credentials
        sh '''
            git clone https://$GIT_USER:$GIT_PASS@${gitOpsRepo} ${gitOpsDir}
        '''

        // Update the image tag in the yaml file
        sh '''
            cd ${gitOpsDir}
            ls
            # Ensure the file path exists before trying to modify
            if [ ! -f "${filePath}" ]; then
                echo "Error: File not found at ${filePath}"
                exit 1
            fi
            sed -i "s#image: .*#image: ${docker_user}/${service}:${commitID}#" ${filePath}
        '''

        // Commit and push the change
        sh '''
            cd ${gitOpsDir}
            git config user.email "vonhatphuoc32@gmail.com" // Thay bằng email GitHub của bạn
            git config user.name "nhatphuoc" // Thay bằng tên người dùng GitHub của bạn
            git add ${filePath}
            # Check if there are changes to commit
            if git diff --staged --quiet; then
                echo "No changes to commit"
            else
                git commit -m "Update image tag for ${service} to ${docker_user}/${service}:${commitID}"
            fi
            git push https://$GIT_USER:$GIT_PASS@${gitOpsRepo} main
        '''
    }
}